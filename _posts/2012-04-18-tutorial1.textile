--- 
layout: default 
title: Tutorial1 
---

 사용자에게 제공할 정보가 계층적으로 구성이되어 있을 때 일반적으로 Navigation 과 같은 방법을 통해 화면을 구성합니다.  TAU UI Framework에서는 이를 Scene Navigation 이라고 부르며 이를 쉽게 구현할 수 있도록 SequnceNavigator를 제공하고 있습니다.
이 문서는 TAU UI Framework에서 제공하는 SequenceNavigator를 이용하여 화면간의 Navigation 방법에 대해 설명합니다. 또한 테이블 페이지에 특화된 TableSceneController를 사용함으로써 기존 SceneController로 수행해야 했던 복잡한 작업들을 간단히 구현할 수 있도록 해줍니다.

h1. 개요

가장 기본적으로 사용되는 App인 연락처를 구현해 보는 예제로써 세 가지 정도의 단계로 설명이 됩니다.  기본적으로 전체 목록을 볼 수 있는 페이지와 특정 테이블 셀(cell)을 클릭하였을 경우 보여질 상세페이지 그리고 그 둘을 연결해 주는 Controller로 구성되어 있습니다. TAU UI Framework에서 Controller의 기능은 화면을 생성하고 사용자의 입력(이벤트)을 처리합니다.

이 예제는 두개의 파일로 구성되어 있으며 앱 실행시 최초 로딩되는 main.js 에서 다음과 같이 info.js 파일을 로딩합니다.

pre(prettyprint). $require('/info.js');

연락처 App의 사용자 시나리오는 다음의 화면과 같습니다.

!{max-width:100%}/img/contacts.png!

예제에서 사용할 데이터는 JSON형태로 기술하고 다음과 같은 형태를 가집니다.

pre(prettyprint). [{group: '친구', name: 'Steve Jobs', mobile: '011-1024-1111', company: 'Apple Inc.', position: 'CEO', img: '/img/stevejobs.jpg'},
 {group: '친구', name: 'Bill Gates', mobile: '011-1024-2222', company: 'Corbis', position: 'Chairman', img: '/img/billgates.jpg'},
 {group: '친구', name: 'Mark Zuckerberg', mobile: '011-1024-3333', company: 'Facebook', position: 'CEO', img: '/img/markzuckerberg.jpg'},
 {group: '가족', name: '아버지', mobile: '011-1024-9999', img: ''},
 ...
]

h1. Main Controller 클래스 생성

Main Controller 클래스는 App이 구동될 때 Runtime에 의해 처음 실행되는 Class로써 이름을 'tau.sample.ContactListController'로 클래스를 생성하겠습니다.
계층적인 정보를 보여주기 위해 TAU Framework에서 기본적으로 제공되는 'tau.ui.SequenceNavigator'를 상속받아 'tau.sample.ContactsController'클래스를 정의합니다. SequenceNavigator 는 계층적으로 구성된 정보를 편리하게 Navigation 할 수 있도록 제작된 Controller 클래스 입니다. 

pre(prettyprint). $class('tau.sample.ContactsController').extend(tau.ui.SequenceNavigator).define({
  init : function() {
    this.setRootController(new tau.sample.ContactTableController());
  }
});

* 최초로 실행되는 init() 메소드에서 사용할 예제에 필요한 데이터를 로딩
* SeqeunceNavigator의 RootController로 'tau.sample.ContactListController' 클래스를 인스턴스를  설정

h1. 연락처 리스트 생성

주어진 데이터를 바탕으로 전체 연락처 리스트 생성하는 Controller 클래스로써 'tau.ui.TableSceneController'클래스를 상속받아 정의합니다.  'tau.ui.TableSceneController'는 리스트형태의 화면을 쉽게 작성할 수 있도록 TAU Framework에서 제공하는 Controller 클래스입니다. 

h5. ContactListController

<pre class="prettyprint">
$class('tau.sample.ContactListController').extend(tau.ui.TableSceneController).define({
  /**
   * Constructor, initialize model object as null
   */
  ContactListController: function () {
    this._model = null;
  },
   
  init: function () {
    this.setTitle('주소록');
    var table = new tau.ui.Table({
      group: true,
      sectionSort: tau.ui.ASC_SORT,
      styleClass: {
        section: 'sectionGroup'
      }
    });
    var scene = this.getScene();
    scene.setStyleClass({type: 'ios'});
    scene.add(table);   
    tau.sample.ContactListController.$super.init.apply(this, arguments);
  },
   
  /**
   * loads model to display content on the table component
   * @param {Number} start start index(inclusive 0)
   * @param {Number} size the number of cells to display on the current
   *        page
   * @returns {Number} the number of cells to load
   */
  loadModel: function (start, size) {
    // in real world the model will be loaded from storage like DB
    this._model = tau.getRuntime().getModule().getConfig().model;
    return this._model.length;
  },
   
  /**
   * Create table cell object and returns that
   * @param {Number} index current index of the model at which the table
   *        cell object is created.
   * @param {Number} offset the offset from the beginning
   * @returns {tau.ui.TableCell} newly created TabelCell object
   */
  makeTableCell: function(index, offset) {
    var model = this._model;
    return new tau.ui.TableCell({
      title: model[index].name,
      groupName: model[index].group
    });
  },
   
  /**
   * callback method when user selects specific table cell.
   * @param {tau.ui.TableCell} current current table cell object
   * @param {tau.ui.TableCell} before just before selected table cell
   *        object
   */
  cellSelected: function(current, before) {
    var contact = this.findContact(current.getTitle());
    if (contact) {
      this.getParent().pushController( new tau.sample.ContactInfo(contact));
    }
  },
   
  /**
   * 
   * @param name
   * @returns
   */
  findContact: function (name) {
    for (var i = 0, len = this._model.length; i < len; i++) {
      if (this._model[i].name === name) {
        return this._model[i];
      }
    }
    return null;
  },
   
  /**
   * releases all the occupied object
   */
    destroy: function() {
      this._model = null;
    }
});
</pre>


* init(): 사용할 Table컴포넌트의 속성을 설정하고 테마를 'ios'로 설정
* loadModel() callback메소드로서 Table컴포넌트에 생성할 모델을 로딩하고 생성할 TableCell의 개수를 반환
* makeTableCell() callback메소드로서 명시된 인덱스에 해당하는 TableCell의 객체를 생성하여 반환
* cellSelected() 사용자가 TableCell을 터치했을 때 호출되는 callback메소드로서 상세정보를 보여주기 위한 Controller를 생성하고 pushController()메소드를 통해 Navigation을 실행(parent는 SequenceNavigator 임)
** 파라미터 변수로 상제정보 객체를 넘김.
* destory() callback메소드로서 인스턴스변수인 model을 nullify시킴

h1. 상세정보 화면 생성

tau.sample.ContactInfo 클래스는 주어진 주소록 정보를 바탕으로 연락처 상세 화면을 생성하는 Controller 클래스로써 기본적으로 'tau.ui.SceneController'클래스를 상속받아 정의합니다

h5. ContactInfo

<pre class="prettyprint">
$class('tau.sample.ContactInfo').extend(tau.ui.SceneController).define({
  /**
   * 
   * @param name
   * @param phone
   */
  ContactInfo: function (info) {
    this._info = info;
    this.setTitle('정보');
  },
  /**
   * create detail scene
   */
  loadScene: function () {
    var brief, btn, label, title, labels, cell,
        scene = this.getScene();
    scene.setStyles({display: 'flexbox', 
                    '-webkit-box-orient': 'vertical'});
    scene.setStyleClass({type:'ios'});
    var table = new tau.ui.Table({
        group: true,
        styles: {cellLeftItemWidth: '80px', '-webkit-box-flex': 1}, 
        styleClass: { section: 'sectionGroup' }}
      );
    var section = new tau.ui.TableSection();
    var photo = new tau.ui.ImageView();
    photo.setSrc(this._info.img || '/img/noname.png');
    photo.setStyles({padding: '10px'});
    cell = new tau.ui.TableCell({leftItem: photo, styles: {height: '100px'}});
    cell.setDisabled(true);
    brief = new tau.ui.Panel();
    brief.setStyles({display: 'inline-block', 'margin-left': '10px'});
    label = new tau.ui.Label();
    label.setText(this._info.name);
    label.setStyles({width: '100%', 'font-weight': 'bold'});
    brief.add(label);
    title = this._info.position;
    if (title && this._info.deppartment) {
      title += (' - ' + this._info.deppartment);
    } else  {
      title = this._info.deppartment;
    }
    if (title) {
      label = new tau.ui.Label();
      label.setText(title);
      label.setStyles({width: '100%', display: 'block'});
      brief.add(label);
    }
    if (this._info.company) {
      label = new tau.ui.Label();
      label.setText(this._info.company);
      label.setStyles({width: '100%', display: 'block'});
      brief.add(label);
    }
    cell.setContentItem(brief);
    section.add(cell);
    table.add(section);
     
    section = new tau.ui.TableSection();
    table.add(section);
    if (this._info.office) {
      section.add(this.newTableCell('직장', this._info.office));
    }
    if (this._info.mobile) {
      section.add(this.newTableCell('휴대전화', this._info.mobile));
    }
     
    if (this._info.email) {
      section = new tau.ui.TableSection();
      section.add(this.newTableCell('직장', this._info.email));
      table.add(section);
    }
    scene.add(table);
     
    var panel = new tau.ui.Panel();
    panel.setStyles({display: '-webkit-box', '-webkit-box-pack': 'justify', 'padding': '5px'});
    labels = ['메시지', '연락처공유', '즐겨찾기']; 
    for(var i = 0, len = labels.length; i < len; i++) {
      btn = new tau.ui.Button({
        styles: ({display: 'block'}),
           label: labels[i]
      });
      panel.add(btn);
    }
    panel.onEvent(tau.rt.Event.TAP, this.buttonSelected, this);
    scene.add(panel);
  },
   
  /**
   * event listener notified when user clicks button positioned bottom
   * @param e
   * @param payload
   */
  buttonSelected: function (e, payload) {
    var src = e.getSource();
    if (src instanceof tau.ui.Button) {
      tau.alert('['+ src.getLabel().normal + '] is tapped!');
    }
  },
   
  /**
   * creates new table cell with specified label and value
   * @param text
   * @param value
   * @returns {tau.ui.TableCell}
   */
  newTableCell: function (text, value) {
    var label = new tau.ui.Label();
    label.setText(text);
    label.setStyles({'font-weight': 'bold'});
    var cell = new tau.ui.TableCell({
      leftItem : label,
      title: value
    });
    return cell;
  }
});
</pre>


* 생성자에서는 넘겨받은 파라미터를 인스턴스 변수로 설정
* loadScene()에서는 보여줄 화면을 생성해줌.
** Table컴포넌트를 기본적으로 활용하며 Grouping하여 관련된 정보를 출력합니다.
** tau.ui.ImageView를 이용해 이미지 공간(photo)을 생성하고
** 이미지 공간 우측에 인락처 인적정보를 출력하기 위해 패널(brief)을 생성하고 이름, 직책, 부서, 회사정보를 출력하기 위한 각각의 Lable를 생성합니다.
** 다음으로 전화번호와 이메일을 표시하기 위한 TableCell을 생성합니다.
** 화면 하단에 "메시지", "연락처공유", "즐겨찾기" 를 위한 버튼을 생성하고 추가합니다.
* buttonSelected(): 사용자가 화면하단의  버튼을 터치했을 때 호출되는 callback 메소드(해당 버튼에 대한 기능은 구현되어 있지 않음

h1. Complete Source Code

h5. main.js

<pre class="prettyprint">
$require('/info.js');
/**
 * Contact sample application class
 */
$class('tau.sample.ContactsController').extend(tau.ui.SequenceNavigator).define({
  init: function() {
    this.setRootController(new tau.sample.ContactListController());
  }
});
/**
 * Contact table list use with TableSceneController
 */
$class('tau.sample.ContactListController').extend(tau.ui.TableSceneController).define({
  /**
   * Constructor, initialize model object as null
   */
  ContactListController: function () {
    this._model = null;
  },
   
  init: function () {
    this.setTitle('주소록');
    var table = new tau.ui.Table({
      group: true,
      sectionSort: tau.ui.ASC_SORT,
      styleClass: {
        section: 'sectionGroup'
      }
    });
    var scene = this.getScene();
    scene.setStyleClass({type: 'ios'});
    scene.add(table);   
    tau.sample.ContactListController.$super.init.apply(this, arguments);
  },
   
  /**
   * loads model to display content on the table component
   * @param {Number} start start index(inclusive 0)
   * @param {Number} size the number of cells to display on the current
   *        page
   * @returns {Number} the number of cells to load
   */
  loadModel: function (start, size) {
    // in real world the model will be loaded from storage like DB
    this._model = tau.getRuntime().getModule().getConfig().model;
    return this._model.length;
  },
   
  /**
   * Create table cell object and returns that
   * @param {Number} index current index of the model at which the table
   *        cell object is created.
   * @param {Number} offset the offset from the beginning
   * @returns {tau.ui.TableCell} newly created TabelCell object
   */
  makeTableCell: function(index, offset) {
    var model = this._model;
    return new tau.ui.TableCell({
      title: model[index].name,
      groupName: model[index].group
    });
  },
   
  /**
   * callback method when user selects specific table cell.
   * @param {tau.ui.TableCell} current current table cell object
   * @param {tau.ui.TableCell} before just before selected table cell
   *        object
   */
  cellSelected: function(current, before) {
    var contact = this.findContact(current.getTitle());
    if (contact) {
      this.getParent().pushController( new tau.sample.ContactInfo(contact));
    }
  },
   
  /**
   * 
   * @param name
   * @returns
   */
  findContact: function (name) {
    for (var i = 0, len = this._model.length; i < len; i++) {
      if (this._model[i].name === name) {
        return this._model[i];
      }
    }
    return null;
  },
   
  /**
   * releases all the occupied object
   */
    destroy: function() {
      this._model = null;
    }
});
</pre>

h5. info.js

<pre class="prettyprint">
 /**
 * Contact detail scene
 */
$class('tau.sample.ContactInfo').extend(tau.ui.SceneController).define({
  /**
   * 
   * @param name
   * @param phone
   */
  ContactInfo: function (info) {
    this._info = info;
    this.setTitle('정보');
  },
  /**
   * create detail scene
   */
  loadScene: function () {
    var brief, btn, label, title, labels, cell,
        scene = this.getScene();
    scene.setStyles({display: 'flexbox', 
                    '-webkit-box-orient': 'vertical'});
    scene.setStyleClass({type:'ios'});
    var table = new tau.ui.Table({
        group: true,
        styles: {cellLeftItemWidth: '80px', '-webkit-box-flex': 1}, 
        styleClass: { section: 'sectionGroup' }}
      );
    var section = new tau.ui.TableSection();
    var photo = new tau.ui.ImageView();
    photo.setSrc(this._info.img || '/img/noname.png');
    photo.setStyles({padding: '10px'});
    cell = new tau.ui.TableCell({leftItem: photo, styles: {height: '100px'}});
    cell.setDisabled(true);
    brief = new tau.ui.Panel();
    brief.setStyles({display: 'inline-block', 'margin-left': '10px'});
    label = new tau.ui.Label();
    label.setText(this._info.name);
    label.setStyles({width: '100%', 'font-weight': 'bold'});
    brief.add(label);
    title = this._info.position;
    if (title && this._info.deppartment) {
      title += (' - ' + this._info.deppartment);
    } else  {
      title = this._info.deppartment;
    }
    if (title) {
      label = new tau.ui.Label();
      label.setText(title);
      label.setStyles({width: '100%', display: 'block'});
      brief.add(label);
    }
    if (this._info.company) {
      label = new tau.ui.Label();
      label.setText(this._info.company);
      label.setStyles({width: '100%', display: 'block'});
      brief.add(label);
    }
    cell.setContentItem(brief);
    section.add(cell);
    table.add(section);
     
    section = new tau.ui.TableSection();
    table.add(section);
    if (this._info.office) {
      section.add(this.newTableCell('직장', this._info.office));
    }
    if (this._info.mobile) {
      section.add(this.newTableCell('휴대전화', this._info.mobile));
    }
     
    if (this._info.email) {
      section = new tau.ui.TableSection();
      section.add(this.newTableCell('직장', this._info.email));
      table.add(section);
    }
    scene.add(table);
     
    var panel = new tau.ui.Panel();
    panel.setStyles({display: '-webkit-box', '-webkit-box-pack': 'justify', 'padding': '5px'});
    labels = ['메시지', '연락처공유', '즐겨찾기']; 
    for(var i = 0, len = labels.length; i < len; i++) {
      btn = new tau.ui.Button({
        styles: ({display: 'block'}),
           label: labels[i]
      });
      panel.add(btn);
    }
    panel.onEvent(tau.rt.Event.TAP, this.buttonSelected, this);
    scene.add(panel);
  },
   
  /**
   * event listener notified when user clicks button positioned bottom
   * @param e
   * @param payload
   */
  buttonSelected: function (e, payload) {
    var src = e.getSource();
    if (src instanceof tau.ui.Button) {
      tau.alert('['+ src.getLabel().normal + '] is tapped!');
    }
  },
   
  /**
   * creates new table cell with specified label and value
   * @param text
   * @param value
   * @returns {tau.ui.TableCell}
   */
  newTableCell: function (text, value) {
    var label = new tau.ui.Label();
    label.setText(text);
    label.setStyles({'font-weight': 'bold'});
    var cell = new tau.ui.TableCell({
      leftItem : label,
      title: value
    });
    return cell;
  }
});   

</pre>

h1. Reference

* "소스코드 다운로드":/attachments/tutorial1-source.zip